#!/bin/bash

################################################################################################
#
# Author: Jason Cheng (jason@jason.tools)
# Blog: blog.jason.tools
# Date: 2020/07/13
#
# Please note that your nrpe target needs to run "visudo" and add this line:
# "nagios ALL=NOPASSWD: /bin/systemctl"
#
# Partial code reference from check_zmcontrol 
# https://exchange.nagios.org/directory/Plugins/Email-and-Groupware/check_zmcontrol/details
#
################################################################################################

## Changes on fork at https://github.com/francescor/check_pmg_services:
#  * remove sudo (it will be used as a nagios passive check: no nrpe)
#  * fix postgresql check
#  * updated list of running services (as for Pmg v.7.1-2)
#  * using SERVICES_TO_CHECK for services to check
#  * limiting systemctl calls and output

SERVICES_TO_CHECK="clamav-freshclam|clamav-daemon|postfix@-.service|postgresql@|rsyslog|ssh|chrony|pmg-smtp-filter.service|pmgdaemon.service|pmgpolicy.service|pmgproxy.service"


STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
VERSION="v1.0"

usage ()
{
        echo "check_pmg_services Nagios plugin by Jason Cheng (jason@jason.tools)"
        echo "Usage: check_pmg_services [-v]"
        echo "Options: "
        echo "-v    Show version"
        exit $STATE_UNKNOWN
}

if [ $# -eq 0 ]; then
        usage;
        exit $STATE_UNKOWN
fi
if [ ! $# ]; then
        usage;
        exit $STATE_UNKOWN
fi

warn=""
crit=""
while [ $# -ne 0 ]
do
   case "$1" in
        -v | --version)
                echo "check_pmg_services $VERSION"
                exit $STATE_OK
                ;;
        -w)
                shift
                warn="x"
                ;;
        -c)
                shift
                crit="x"
                ;;
        *)
                usage
                exit $STATE_UNKNOWN
                ;;
    esac
    shift
done

if [ "$warn" != "" ]
then
        if [ "$crit" != "" ]
        then
                usage
                exit $STATE_UNKNOWN
        fi
        STATE_PROBLEM=$STATE_WARNING
fi
if [ "$crit" != "" ]
then
        STATE_PROBLEM=$STATE_CRITICAL
fi

# Get service status

/bin/systemctl -a --no-pager  --no-legend  --type=service | grep -E $SERVICES_TO_CHECK > /tmp/pmg_services.txt

# Statistics on the number of failed services
serv_not_running=`grep -E 'failed|dead|exited' /tmp/pmg_services.txt`
if [[ -z "$serv_not_running" ]]
then
        getmsg="All services are up and running"
        echo $getmsg$getresult2
        exit $STATE_OK
else
        getmsg="Some services are not running: "
        getresult=`grep -E 'failed|dead|exited' /tmp/pmg_services.txt | awk '{print "[SERVICE:"$1,"("$5,$6,$7,$8")","STATE:"$4"]"}'`
        getresult2=`echo $getresult | tr "\n\r" " - "`
        echo $getmsg$getresult2
        exit $STATE_PROBLEM	
fi
